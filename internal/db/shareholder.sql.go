// Code generated by sqlc. DO NOT EDIT.
// source: shareholder.sql

package db

import (
	"context"
)

const createShareholder = `-- name: CreateShareholder :one
INSERT INTO shareholder (
    name, email, mobile, folio_number, certificate_number, pan_number, agree_terms
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, email, email_verified, mobile, mobile_verified, folio_number, certificate_number, pan_number, agree_terms
`

type CreateShareholderParams struct {
	Name              string `json:"name"`
	Email             string `json:"email"`
	Mobile            string `json:"mobile"`
	FolioNumber       string `json:"folio_number"`
	CertificateNumber string `json:"certificate_number"`
	PanNumber         string `json:"pan_number"`
	AgreeTerms        bool   `json:"agree_terms"`
}

func (q *Queries) CreateShareholder(ctx context.Context, arg CreateShareholderParams) (Shareholder, error) {
	row := q.db.QueryRowContext(ctx, createShareholder,
		arg.Name,
		arg.Email,
		arg.Mobile,
		arg.FolioNumber,
		arg.CertificateNumber,
		arg.PanNumber,
		arg.AgreeTerms,
	)
	var i Shareholder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Mobile,
		&i.MobileVerified,
		&i.FolioNumber,
		&i.CertificateNumber,
		&i.PanNumber,
		&i.AgreeTerms,
	)
	return i, err
}

const getShareholder = `-- name: GetShareholder :one
SELECT id, name, email, email_verified, mobile, mobile_verified, folio_number, certificate_number, pan_number, agree_terms FROM shareholder
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShareholder(ctx context.Context, id int32) (Shareholder, error) {
	row := q.db.QueryRowContext(ctx, getShareholder, id)
	var i Shareholder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Mobile,
		&i.MobileVerified,
		&i.FolioNumber,
		&i.CertificateNumber,
		&i.PanNumber,
		&i.AgreeTerms,
	)
	return i, err
}

const updateEmailVerifyShareholder = `-- name: UpdateEmailVerifyShareholder :one
UPDATE shareholder SET email_verified = $2
WHERE id = $1
RETURNING id, name, email, email_verified, mobile, mobile_verified, folio_number, certificate_number, pan_number, agree_terms
`

type UpdateEmailVerifyShareholderParams struct {
	ID            int32 `json:"id"`
	EmailVerified bool  `json:"email_verified"`
}

func (q *Queries) UpdateEmailVerifyShareholder(ctx context.Context, arg UpdateEmailVerifyShareholderParams) (Shareholder, error) {
	row := q.db.QueryRowContext(ctx, updateEmailVerifyShareholder, arg.ID, arg.EmailVerified)
	var i Shareholder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Mobile,
		&i.MobileVerified,
		&i.FolioNumber,
		&i.CertificateNumber,
		&i.PanNumber,
		&i.AgreeTerms,
	)
	return i, err
}

const updateMobileVerifyShareholder = `-- name: UpdateMobileVerifyShareholder :one
UPDATE shareholder SET mobile_verified = $2
WHERE id = $1
RETURNING id, name, email, email_verified, mobile, mobile_verified, folio_number, certificate_number, pan_number, agree_terms
`

type UpdateMobileVerifyShareholderParams struct {
	ID             int32 `json:"id"`
	MobileVerified bool  `json:"mobile_verified"`
}

func (q *Queries) UpdateMobileVerifyShareholder(ctx context.Context, arg UpdateMobileVerifyShareholderParams) (Shareholder, error) {
	row := q.db.QueryRowContext(ctx, updateMobileVerifyShareholder, arg.ID, arg.MobileVerified)
	var i Shareholder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Mobile,
		&i.MobileVerified,
		&i.FolioNumber,
		&i.CertificateNumber,
		&i.PanNumber,
		&i.AgreeTerms,
	)
	return i, err
}
